import asyncio
import random
from playwright.async_api import async_playwright

# === üîë –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ö–°–ò (Proxy6 Mobile) ===
PROXY_IP = "91.198.218.98"
PROXY_PORT = "8000"
PROXY_USERNAME = "mgtMWq"
PROXY_PASSWORD = "dQGA1d"

PRODUCT_URL = "https://www.ozon.ru/product/rozhkovaya-poluavtomaticheskaya-kofemashina-s-kapuchinatorom-xiaomi-scishare-s1181-belaya-2272648319/"

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
]

HEADERS = {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
}

async def parse_ozon_product(url):
    user_agent = random.choice(USER_AGENTS)

    proxy_config = {
        "server": f"http://{PROXY_IP}:{PROXY_PORT}",
        "username": PROXY_USERNAME,
        "password": PROXY_PASSWORD,
    }

    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=False,
            proxy=proxy_config,
            args=[
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-accelerated-2d-canvas",
                "--no-first-run",
                "--no-zygote",
                "--disable-gpu",
                "--disable-web-security",
                "--disable-features=IsolateOrigins,site-per-process",
                "--window-size=1920,1080",
            ],
        )

        context = await browser.new_context(
            user_agent=user_agent,
            viewport={"width": random.randint(1200, 1920), "height": random.randint(800, 1080)},
            locale="ru-RU",
            timezone_id="Europe/Moscow",
            extra_http_headers=HEADERS,
            ignore_https_errors=True,
            storage_state=None,
            bypass_csp=True,
        )

        page = await context.new_page()

        await page.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
            delete navigator.__proto__.webdriver;
            window.chrome = {runtime: {}};
            Object.defineProperty(navigator, 'languages', {get: () => ['ru-RU', 'ru']});
        """)

        # –û—á–∏—â–∞–µ–º –∫—É–∫–∏ –∏ –∫—ç—à
        await context.clear_cookies()

        print(f"üöÄ –û—Ç–∫—Ä—ã–≤–∞—é Ozon —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ Proxy6 ({PROXY_IP})...")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto("about:blank")
            await asyncio.sleep(1)

            # –¢–µ–ø–µ—Ä—å —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto(url, wait_until="domcontentloaded", timeout=60000)

            # –ñ–¥—ë–º –∏ —Å–∫—Ä–æ–ª–ª–∏–º
            await asyncio.sleep(random.uniform(2, 4))
            await page.mouse.wheel(0, 500)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ‚Äî –Ω–µ—Ç –ª–∏ Cloudflare
            content = await page.content()
            if "fab_chlg_" in content or "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in content:
                print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Cloudflare ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                await page.screenshot(path="cloudflare_block.png", full_page=True)
                await browser.close()
                return

            # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            title = None
            selectors = [
                "h1",
                "div[data-widget='webProductHeading'] h1",
                "div#productHeading h1",
            ]
            for sel in selectors:
                try:
                    el = await page.query_selector(sel)
                    if el:
                        title = await el.inner_text()
                        if title.strip():
                            break
                except:
                    continue

            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
            price = None
            price_selectors = [
                "span[data-widget='webPrice'] span:first-child",
                "div[data-widget='webPrice'] span:first-child",
                "span[style*='font-size: 24px']",
                "span[style*='font-size: 32px']",
            ]
            for sel in price_selectors:
                try:
                    el = await page.query_selector(sel)
                    if el:
                        text = await el.inner_text()
                        clean = "".join(filter(str.isdigit, text))
                        if clean:
                            price = int(clean)
                            break
                except:
                    continue

            print("\n" + "="*60)
            print("üì¶ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê")
            print("="*60)
            print(f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title or '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            print(f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ" if price else "üí∞ –¶–µ–Ω–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞")

            await page.screenshot(path="ozon_success.png", full_page=True)
            print("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ozon_success.png")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
            try:
                ip_js = await page.evaluate("""
                    fetch('https://api.ipify.org?format=json')
                        .then(r => r.json())
                        .then(data => data.ip)
                        .catch(() => '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å')
                """)
                print(f"üåê IP —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: {ip_js}")
            except Exception as e:
                print(f"üåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ JS: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await page.screenshot(path="error_screenshot.png", full_page=True)
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(parse_ozon_product(PRODUCT_URL))