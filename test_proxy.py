# test_proxy.py
import asyncio
import random
from playwright.async_api import async_playwright
from playwright_stealth import stealth  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: stealth –≤–º–µ—Å—Ç–æ stealth_async

# === üîë –ü—Ä–æ–∫—Å–∏ ===
PROXY = {
    "server": "http://91.198.218.98:8000",
    "username": "mgtMWq",
    "password": "dQGA1d"
}

# === üß† User-Agent –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ===
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0"

HEADERS = {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
    "Sec-CH-UA": '"Chromium";v="124", "Microsoft Edge";v="124", "Not-A.Brand";v="99"',
    "Sec-CH-UA-Mobile": "?0",
    "Sec-CH-UA-Platform": '"Windows"',
    "Upgrade-Insecure-Requests": "1",
}

async def test_proxy():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ –≤ Docker...")
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=True,
            proxy=PROXY,
            args=[
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-accelerated-2d-canvas",
                "--no-first-run",
                "--no-zygote",
                "--disable-gpu",
                "--disable-web-security",
                "--window-size=1920,1080",
                "--disable-features=IsolateOrigins,site-per-process",
                "--disable-site-isolation-trials",
            ],
        )

        context = await browser.new_context(
            user_agent=USER_AGENT,
            viewport={"width": 1920, "height": 1080},
            locale="ru-RU",
            timezone_id="Europe/Moscow",
            extra_http_headers=HEADERS,
            ignore_https_errors=True,
        )

        page = await context.new_page()

        # üë§ –ü—Ä–∏–º–µ–Ω—è–µ–º stealth (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è!)
        await stealth.stealth(page)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: await stealth(page)

        await page.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
            delete navigator.__proto__.webdriver;
            window.chrome = {runtime: {}};
            Object.defineProperty(navigator, 'languages', {get: () => ['ru-RU', 'ru', 'en-US', 'en']});
            Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
        """)

        # üë§ –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è: –∑–∞—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        print("üè† –ò–º–∏—Ç–∞—Ü–∏—è: –∑–∞—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Ozon...")
        await page.goto("https://www.ozon.ru", wait_until="domcontentloaded")
        await asyncio.sleep(random.uniform(2, 5))

        # –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ + –∫–ª–∏–∫
        await page.mouse.move(random.randint(100, 500), random.randint(100, 500))
        await asyncio.sleep(random.uniform(0.5, 1.5))
        await page.mouse.click(300, 50)
        await asyncio.sleep(random.uniform(1, 2))

        # üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
        TEST_PRODUCT_URL = "https://www.ozon.ru/product/rozhkovaya-poluavtomaticheskaya-kofemashina-s-kapuchinatorom-xiaomi-scishare-s1181-belaya-2272648319/"
        print(f"üõçÔ∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞: {TEST_PRODUCT_URL}")
        await page.goto(TEST_PRODUCT_URL, wait_until="domcontentloaded")

        await asyncio.sleep(random.uniform(2, 4))
        await page.mouse.wheel(0, 800)
        await asyncio.sleep(1)

        # üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_element = await page.query_selector("h1")
        title = await title_element.inner_text() if title_element else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞: {title}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
        ip = await page.evaluate("""
            fetch('https://api.ipify.org?format=json')
                .then(r => r.json())
                .then(d => d.ip)
                .catch(() => '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å')
        """)
        print(f"üåê IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {ip}")

        # üì∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await page.screenshot(path="debug.png")
        print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: debug.png")

        await browser.close()

if __name__ == "__main__":
    asyncio.run(test_proxy())