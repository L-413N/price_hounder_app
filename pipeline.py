# pipeline.py
import os
import asyncio
import logging
from typing import Iterable, List, Optional

from mp_parser import parse_product
from database import (
    init_db,
    save_price_snapshot,
    schedule_fail,
    get_last_price_and_checked,
)

# ---------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger("pipeline")

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
CONCURRENCY = int(os.getenv("CONCURRENCY", "3"))
_semaphore = asyncio.Semaphore(CONCURRENCY)

# –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö), 0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ
PRICE_CHANGE_ALERT_PCT = float(os.getenv("PRICE_CHANGE_ALERT_PCT", "0"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å
_init_done = False
def _ensure_db_once() -> None:
    global _init_done
    if not _init_done:
        init_db()
        _init_done = True


async def parse_and_save_to_db(url: str, user_id: Optional[int] = None) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞:
      - –ø–∞—Ä—Å–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞,
      - –ª–æ–≥–∏—Ä—É–µ—Ç –¥–µ–ª—å—Ç—É —Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è),
      - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–Ω—ç–ø—à–æ—Ç —Ü–µ–Ω—ã –ø—Ä–∏ —É—Å–ø–µ—Ö–µ,
      - –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –±—ç–∫–æ—Ñ—Ñ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä user_id –ø—Ä–∏–Ω—è—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏; –≤ –ë–î —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    """
    _ensure_db_once()

    print(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥: {url}")
    async with _semaphore:
        info = await parse_product(url)

    if info is not None:
        # –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—ã–ª–æ –¥–æ —ç—Ç–æ–≥–æ
        prev = get_last_price_and_checked(info.url)
        prev_price = prev[0] if prev else None

        if isinstance(prev_price, int):
            diff = info.price - prev_price
            if prev_price > 0:
                pct = (diff / prev_price) * 100.0
            else:
                pct = 0.0
            arrow = "‚Üë" if diff > 0 else ("‚Üì" if diff < 0 else "‚Üí")
            logger.info(
                f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {arrow} {abs(diff)} ‚ÇΩ ({pct:+.2f}%) ‚Äî {info.title}"
            )
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
            if PRICE_CHANGE_ALERT_PCT > 0 and abs(pct) >= PRICE_CHANGE_ALERT_PCT and diff != 0:
                logger.warning(
                    f"‚ö° –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã ({pct:+.2f}%) –¥–ª—è {info.url}"
                )
        else:
            logger.info(f"üÜï –ü–µ—Ä–≤–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è —Ü–µ–Ω—ã: {info.price} ‚ÇΩ ‚Äî {info.title}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω—ç–ø—à–æ—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        save_price_snapshot(info.url, info.price, currency="‚ÇΩ", title=info.title)
        return True
    else:
        schedule_fail(url)
        return False


async def run_batch(urls: Iterable[str], user_id: Optional[int] = None) -> List[bool]:
    """
    –£–¥–æ–±–Ω—ã–π –±–∞—Ç—á-—Ä–∞–Ω–Ω–µ—Ä: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–ª–∞–≥–æ–≤ —É—Å–ø–µ—Ö–∞.
    """
    tasks = [asyncio.create_task(parse_and_save_to_db(u, user_id=user_id)) for u in urls]
    results = await asyncio.gather(*tasks)
    return list(results)


def run_cli(urls: List[str]) -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    """
    _ensure_db_once()
    asyncio.run(run_batch(urls))


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä:
    #   python pipeline.py "https://www.ozon.ru/product/..." "https://www.ozon.ru/product/..."
    import sys
    if len(sys.argv) < 2:
        print("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω URL —Ç–æ–≤–∞—Ä–∞ Ozon –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")
        sys.exit(1)
    run_cli(sys.argv[1:])
