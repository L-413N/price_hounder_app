import asyncio
import random
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError
from .models import ProductInfo
from .config import *
from .utils import *
import logging

# –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è mp_parser
logger = logging.getLogger("mp_parser")
logger.setLevel(logging.INFO)

# –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

async def is_cloudflare_active(page) -> bool:
    content = await page.content()
    triggers = [
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ JavaScript",
        "–ù–∞–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç",
        "Checking your browser",
    ]
    return any(trigger in content for trigger in triggers)

async def extract_price(page) -> int:
    selectors = [
        "[data-widget='webPrice'] span:nth-child(1)",
        "span[data-widget='webSale']",
        "span[data-widget='price']",
    ]
    for selector in selectors:
        try:
            elem = await page.wait_for_selector(selector, timeout=5000)
            if elem:
                text = await elem.inner_text()
                price_str = "".join(filter(str.isdigit, text))
                return int(price_str) if price_str else None
        except:
            continue
    return None

async def parse_product(url: str, retry_count: int = 0) -> ProductInfo:
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {url} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1})")
    url = clean_url(url)
    if retry_count >= MAX_RETRIES:
        return ProductInfo(url=url, error="Max retries exceeded")

    if is_permanent_failure(url):
        return ProductInfo(url=url, error="Too many CAPTCHA")

    proxy = get_random_proxy(PROXY_POOL)
    logger.info(f"üåê –í—ã–±—Ä–∞–Ω –ø—Ä–æ–∫—Å–∏: {proxy['name']}")

    browser = None
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(
                headless=True,
                proxy={
                    "server": proxy["server"],
                    "username": proxy["username"],
                    "password": proxy["password"],
                },
                args=[
                    "--disable-blink-features=AutomationControlled",
                    "--no-sandbox",
                    "--disable-gpu",
                    "--window-size=1920,1080",
                ],
            )

            context = await browser.new_context(
                user_agent=random.choice(USER_AGENTS),
                viewport={"width": 1920, "height": 1080},
                locale="ru-RU",
                timezone_id="Europe/Moscow",
                extra_http_headers=HEADERS,
            )

            page = await context.new_page()
            await page.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                delete navigator.__proto__.webdriver;
            """)

            # üë§ –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
            logger.debug("üè† –ò–º–∏—Ç–∞—Ü–∏—è: –∑–∞—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é Ozon...")
            await page.goto("https://www.ozon.ru", wait_until="domcontentloaded")
            await asyncio.sleep(random.uniform(1, 2))
            await page.mouse.move(300, 200)
            await page.mouse.click(300, 50)
            await asyncio.sleep(1)

            # üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞
            logger.debug(f"üõçÔ∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞: {url}")
            await page.goto(url, wait_until="domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)
            await asyncio.sleep(random.uniform(2, 3))
            await page.mouse.wheel(0, 800)
            await asyncio.sleep(1)

            # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ CAPTCHA
            if await is_cloudflare_active(page):
                logger.warning(f"‚ö†Ô∏è Cloudflare CAPTCHA –Ω–∞ {url} (–ø—Ä–æ–∫—Å–∏: {proxy['name']}). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                record_failure(url)
                await asyncio.sleep(random.uniform(5, 8))
                return await parse_product(url, retry_count + 1)

            # üìå –ñ–¥—ë–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                await page.wait_for_selector("h1", timeout=ELEMENT_WAIT_TIMEOUT)
            except PlaywrightTimeoutError:
                await asyncio.sleep(random.uniform(5, 8))
                return await parse_product(url, retry_count + 1)

            # üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            title_elem = await page.query_selector("h1")
            title = await title_elem.inner_text() if title_elem else None
            price = await extract_price(page)

            # ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞
            if price:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {title} ‚Äî {price} ‚ÇΩ (—á–µ—Ä–µ–∑ {proxy['name']})")
            else:
                logger.warning(f"‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {url}")

            return ProductInfo(
                url=url,
                title=title,
                price=price,
                error=None,
                captcha_rate=FAILED_ATTEMPTS[url] / max(1, retry_count + 1)
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url} —á–µ—Ä–µ–∑ {proxy['name']}: {e}")
        await asyncio.sleep(random.uniform(5, 8))
        return await parse_product(url, retry_count + 1)
    finally:
        if browser:
            await browser.close()